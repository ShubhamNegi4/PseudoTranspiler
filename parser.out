Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement NEWLINE statement_list
Rule 3     statement_list -> statement NEWLINE
Rule 4     statement -> assignment
Rule 5     statement -> input_stmt
Rule 6     statement -> output_stmt
Rule 7     statement -> if_stmt
Rule 8     statement -> while_stmt
Rule 9     assignment -> SET ID TO term_low
Rule 10    input_stmt -> INPUT ID
Rule 11    output_stmt -> PRINT term_low
Rule 12    if_stmt -> IF condition THEN NEWLINE statement_list else_part END
Rule 13    else_part -> ELSE NEWLINE statement_list
Rule 14    else_part -> <empty>
Rule 15    while_stmt -> WHILE condition DO NEWLINE statement_list END
Rule 16    condition -> term_low comp_op term_low
Rule 17    comp_op -> EQ
Rule 18    comp_op -> NE
Rule 19    comp_op -> GT
Rule 20    comp_op -> LT
Rule 21    comp_op -> GE
Rule 22    comp_op -> LE
Rule 23    comp_op -> TYPE_EQ
Rule 24    term_low -> term_low PLUS term_high
Rule 25    term_low -> term_low MINUS term_high
Rule 26    term_low -> term_high
Rule 27    term_high -> term_high MULTIPLY operand
Rule 28    term_high -> term_high DIVIDE operand
Rule 29    term_high -> term_high MOD operand
Rule 30    term_high -> operand
Rule 31    operand -> NUMBER
Rule 32    operand -> STRING
Rule 33    operand -> ID

Terminals, with rules where they appear

DIVIDE               : 28
DO                   : 15
ELSE                 : 13
END                  : 12 15
EQ                   : 17
GE                   : 21
GT                   : 19
ID                   : 9 10 33
IF                   : 12
INPUT                : 10
LE                   : 22
LT                   : 20
MINUS                : 25
MOD                  : 29
MULTIPLY             : 27
NE                   : 18
NEWLINE              : 2 3 12 13 15
NUMBER               : 31
PLUS                 : 24
PRINT                : 11
SET                  : 9
STRING               : 32
THEN                 : 12
TO                   : 9
TYPE_EQ              : 23
WHILE                : 15
error                : 

Nonterminals, with rules where they appear

assignment           : 4
comp_op              : 16
condition            : 12 15
else_part            : 12
if_stmt              : 7
input_stmt           : 5
operand              : 27 28 29 30
output_stmt          : 6
program              : 0
statement            : 2 3
statement_list       : 1 2 12 13 15
term_high            : 24 25 26 27 28 29
term_low             : 9 11 16 16 24 25
while_stmt           : 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement NEWLINE statement_list
    (3) statement_list -> . statement NEWLINE
    (4) statement -> . assignment
    (5) statement -> . input_stmt
    (6) statement -> . output_stmt
    (7) statement -> . if_stmt
    (8) statement -> . while_stmt
    (9) assignment -> . SET ID TO term_low
    (10) input_stmt -> . INPUT ID
    (11) output_stmt -> . PRINT term_low
    (12) if_stmt -> . IF condition THEN NEWLINE statement_list else_part END
    (15) while_stmt -> . WHILE condition DO NEWLINE statement_list END

    SET             shift and go to state 9
    INPUT           shift and go to state 10
    PRINT           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input_stmt                     shift and go to state 5
    output_stmt                    shift and go to state 6
    if_stmt                        shift and go to state 7
    while_stmt                     shift and go to state 8

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .

    $end            reduce using rule 1 (program -> statement_list .)


state 3

    (2) statement_list -> statement . NEWLINE statement_list
    (3) statement_list -> statement . NEWLINE

    NEWLINE         shift and go to state 14


state 4

    (4) statement -> assignment .

    NEWLINE         reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> input_stmt .

    NEWLINE         reduce using rule 5 (statement -> input_stmt .)


state 6

    (6) statement -> output_stmt .

    NEWLINE         reduce using rule 6 (statement -> output_stmt .)


state 7

    (7) statement -> if_stmt .

    NEWLINE         reduce using rule 7 (statement -> if_stmt .)


state 8

    (8) statement -> while_stmt .

    NEWLINE         reduce using rule 8 (statement -> while_stmt .)


state 9

    (9) assignment -> SET . ID TO term_low

    ID              shift and go to state 15


state 10

    (10) input_stmt -> INPUT . ID

    ID              shift and go to state 16


state 11

    (11) output_stmt -> PRINT . term_low
    (24) term_low -> . term_low PLUS term_high
    (25) term_low -> . term_low MINUS term_high
    (26) term_low -> . term_high
    (27) term_high -> . term_high MULTIPLY operand
    (28) term_high -> . term_high DIVIDE operand
    (29) term_high -> . term_high MOD operand
    (30) term_high -> . operand
    (31) operand -> . NUMBER
    (32) operand -> . STRING
    (33) operand -> . ID

    NUMBER          shift and go to state 20
    STRING          shift and go to state 21
    ID              shift and go to state 22

    term_low                       shift and go to state 17
    term_high                      shift and go to state 18
    operand                        shift and go to state 19

state 12

    (12) if_stmt -> IF . condition THEN NEWLINE statement_list else_part END
    (16) condition -> . term_low comp_op term_low
    (24) term_low -> . term_low PLUS term_high
    (25) term_low -> . term_low MINUS term_high
    (26) term_low -> . term_high
    (27) term_high -> . term_high MULTIPLY operand
    (28) term_high -> . term_high DIVIDE operand
    (29) term_high -> . term_high MOD operand
    (30) term_high -> . operand
    (31) operand -> . NUMBER
    (32) operand -> . STRING
    (33) operand -> . ID

    NUMBER          shift and go to state 20
    STRING          shift and go to state 21
    ID              shift and go to state 22

    condition                      shift and go to state 23
    term_low                       shift and go to state 24
    term_high                      shift and go to state 18
    operand                        shift and go to state 19

state 13

    (15) while_stmt -> WHILE . condition DO NEWLINE statement_list END
    (16) condition -> . term_low comp_op term_low
    (24) term_low -> . term_low PLUS term_high
    (25) term_low -> . term_low MINUS term_high
    (26) term_low -> . term_high
    (27) term_high -> . term_high MULTIPLY operand
    (28) term_high -> . term_high DIVIDE operand
    (29) term_high -> . term_high MOD operand
    (30) term_high -> . operand
    (31) operand -> . NUMBER
    (32) operand -> . STRING
    (33) operand -> . ID

    NUMBER          shift and go to state 20
    STRING          shift and go to state 21
    ID              shift and go to state 22

    condition                      shift and go to state 25
    term_low                       shift and go to state 24
    term_high                      shift and go to state 18
    operand                        shift and go to state 19

state 14

    (2) statement_list -> statement NEWLINE . statement_list
    (3) statement_list -> statement NEWLINE .
    (2) statement_list -> . statement NEWLINE statement_list
    (3) statement_list -> . statement NEWLINE
    (4) statement -> . assignment
    (5) statement -> . input_stmt
    (6) statement -> . output_stmt
    (7) statement -> . if_stmt
    (8) statement -> . while_stmt
    (9) assignment -> . SET ID TO term_low
    (10) input_stmt -> . INPUT ID
    (11) output_stmt -> . PRINT term_low
    (12) if_stmt -> . IF condition THEN NEWLINE statement_list else_part END
    (15) while_stmt -> . WHILE condition DO NEWLINE statement_list END

    $end            reduce using rule 3 (statement_list -> statement NEWLINE .)
    ELSE            reduce using rule 3 (statement_list -> statement NEWLINE .)
    END             reduce using rule 3 (statement_list -> statement NEWLINE .)
    SET             shift and go to state 9
    INPUT           shift and go to state 10
    PRINT           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13

    statement                      shift and go to state 3
    statement_list                 shift and go to state 26
    assignment                     shift and go to state 4
    input_stmt                     shift and go to state 5
    output_stmt                    shift and go to state 6
    if_stmt                        shift and go to state 7
    while_stmt                     shift and go to state 8

state 15

    (9) assignment -> SET ID . TO term_low

    TO              shift and go to state 27


state 16

    (10) input_stmt -> INPUT ID .

    NEWLINE         reduce using rule 10 (input_stmt -> INPUT ID .)


state 17

    (11) output_stmt -> PRINT term_low .
    (24) term_low -> term_low . PLUS term_high
    (25) term_low -> term_low . MINUS term_high

    NEWLINE         reduce using rule 11 (output_stmt -> PRINT term_low .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29


state 18

    (26) term_low -> term_high .
    (27) term_high -> term_high . MULTIPLY operand
    (28) term_high -> term_high . DIVIDE operand
    (29) term_high -> term_high . MOD operand

    PLUS            reduce using rule 26 (term_low -> term_high .)
    MINUS           reduce using rule 26 (term_low -> term_high .)
    NEWLINE         reduce using rule 26 (term_low -> term_high .)
    EQ              reduce using rule 26 (term_low -> term_high .)
    NE              reduce using rule 26 (term_low -> term_high .)
    GT              reduce using rule 26 (term_low -> term_high .)
    LT              reduce using rule 26 (term_low -> term_high .)
    GE              reduce using rule 26 (term_low -> term_high .)
    LE              reduce using rule 26 (term_low -> term_high .)
    TYPE_EQ         reduce using rule 26 (term_low -> term_high .)
    THEN            reduce using rule 26 (term_low -> term_high .)
    DO              reduce using rule 26 (term_low -> term_high .)
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    MOD             shift and go to state 32


state 19

    (30) term_high -> operand .

    MULTIPLY        reduce using rule 30 (term_high -> operand .)
    DIVIDE          reduce using rule 30 (term_high -> operand .)
    MOD             reduce using rule 30 (term_high -> operand .)
    PLUS            reduce using rule 30 (term_high -> operand .)
    MINUS           reduce using rule 30 (term_high -> operand .)
    NEWLINE         reduce using rule 30 (term_high -> operand .)
    EQ              reduce using rule 30 (term_high -> operand .)
    NE              reduce using rule 30 (term_high -> operand .)
    GT              reduce using rule 30 (term_high -> operand .)
    LT              reduce using rule 30 (term_high -> operand .)
    GE              reduce using rule 30 (term_high -> operand .)
    LE              reduce using rule 30 (term_high -> operand .)
    TYPE_EQ         reduce using rule 30 (term_high -> operand .)
    THEN            reduce using rule 30 (term_high -> operand .)
    DO              reduce using rule 30 (term_high -> operand .)


state 20

    (31) operand -> NUMBER .

    MULTIPLY        reduce using rule 31 (operand -> NUMBER .)
    DIVIDE          reduce using rule 31 (operand -> NUMBER .)
    MOD             reduce using rule 31 (operand -> NUMBER .)
    PLUS            reduce using rule 31 (operand -> NUMBER .)
    MINUS           reduce using rule 31 (operand -> NUMBER .)
    NEWLINE         reduce using rule 31 (operand -> NUMBER .)
    EQ              reduce using rule 31 (operand -> NUMBER .)
    NE              reduce using rule 31 (operand -> NUMBER .)
    GT              reduce using rule 31 (operand -> NUMBER .)
    LT              reduce using rule 31 (operand -> NUMBER .)
    GE              reduce using rule 31 (operand -> NUMBER .)
    LE              reduce using rule 31 (operand -> NUMBER .)
    TYPE_EQ         reduce using rule 31 (operand -> NUMBER .)
    THEN            reduce using rule 31 (operand -> NUMBER .)
    DO              reduce using rule 31 (operand -> NUMBER .)


state 21

    (32) operand -> STRING .

    MULTIPLY        reduce using rule 32 (operand -> STRING .)
    DIVIDE          reduce using rule 32 (operand -> STRING .)
    MOD             reduce using rule 32 (operand -> STRING .)
    PLUS            reduce using rule 32 (operand -> STRING .)
    MINUS           reduce using rule 32 (operand -> STRING .)
    NEWLINE         reduce using rule 32 (operand -> STRING .)
    EQ              reduce using rule 32 (operand -> STRING .)
    NE              reduce using rule 32 (operand -> STRING .)
    GT              reduce using rule 32 (operand -> STRING .)
    LT              reduce using rule 32 (operand -> STRING .)
    GE              reduce using rule 32 (operand -> STRING .)
    LE              reduce using rule 32 (operand -> STRING .)
    TYPE_EQ         reduce using rule 32 (operand -> STRING .)
    THEN            reduce using rule 32 (operand -> STRING .)
    DO              reduce using rule 32 (operand -> STRING .)


state 22

    (33) operand -> ID .

    MULTIPLY        reduce using rule 33 (operand -> ID .)
    DIVIDE          reduce using rule 33 (operand -> ID .)
    MOD             reduce using rule 33 (operand -> ID .)
    PLUS            reduce using rule 33 (operand -> ID .)
    MINUS           reduce using rule 33 (operand -> ID .)
    NEWLINE         reduce using rule 33 (operand -> ID .)
    EQ              reduce using rule 33 (operand -> ID .)
    NE              reduce using rule 33 (operand -> ID .)
    GT              reduce using rule 33 (operand -> ID .)
    LT              reduce using rule 33 (operand -> ID .)
    GE              reduce using rule 33 (operand -> ID .)
    LE              reduce using rule 33 (operand -> ID .)
    TYPE_EQ         reduce using rule 33 (operand -> ID .)
    THEN            reduce using rule 33 (operand -> ID .)
    DO              reduce using rule 33 (operand -> ID .)


state 23

    (12) if_stmt -> IF condition . THEN NEWLINE statement_list else_part END

    THEN            shift and go to state 33


state 24

    (16) condition -> term_low . comp_op term_low
    (24) term_low -> term_low . PLUS term_high
    (25) term_low -> term_low . MINUS term_high
    (17) comp_op -> . EQ
    (18) comp_op -> . NE
    (19) comp_op -> . GT
    (20) comp_op -> . LT
    (21) comp_op -> . GE
    (22) comp_op -> . LE
    (23) comp_op -> . TYPE_EQ

    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    EQ              shift and go to state 35
    NE              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GE              shift and go to state 39
    LE              shift and go to state 40
    TYPE_EQ         shift and go to state 41

    comp_op                        shift and go to state 34

state 25

    (15) while_stmt -> WHILE condition . DO NEWLINE statement_list END

    DO              shift and go to state 42


state 26

    (2) statement_list -> statement NEWLINE statement_list .

    $end            reduce using rule 2 (statement_list -> statement NEWLINE statement_list .)
    ELSE            reduce using rule 2 (statement_list -> statement NEWLINE statement_list .)
    END             reduce using rule 2 (statement_list -> statement NEWLINE statement_list .)


state 27

    (9) assignment -> SET ID TO . term_low
    (24) term_low -> . term_low PLUS term_high
    (25) term_low -> . term_low MINUS term_high
    (26) term_low -> . term_high
    (27) term_high -> . term_high MULTIPLY operand
    (28) term_high -> . term_high DIVIDE operand
    (29) term_high -> . term_high MOD operand
    (30) term_high -> . operand
    (31) operand -> . NUMBER
    (32) operand -> . STRING
    (33) operand -> . ID

    NUMBER          shift and go to state 20
    STRING          shift and go to state 21
    ID              shift and go to state 22

    term_low                       shift and go to state 43
    term_high                      shift and go to state 18
    operand                        shift and go to state 19

state 28

    (24) term_low -> term_low PLUS . term_high
    (27) term_high -> . term_high MULTIPLY operand
    (28) term_high -> . term_high DIVIDE operand
    (29) term_high -> . term_high MOD operand
    (30) term_high -> . operand
    (31) operand -> . NUMBER
    (32) operand -> . STRING
    (33) operand -> . ID

    NUMBER          shift and go to state 20
    STRING          shift and go to state 21
    ID              shift and go to state 22

    term_high                      shift and go to state 44
    operand                        shift and go to state 19

state 29

    (25) term_low -> term_low MINUS . term_high
    (27) term_high -> . term_high MULTIPLY operand
    (28) term_high -> . term_high DIVIDE operand
    (29) term_high -> . term_high MOD operand
    (30) term_high -> . operand
    (31) operand -> . NUMBER
    (32) operand -> . STRING
    (33) operand -> . ID

    NUMBER          shift and go to state 20
    STRING          shift and go to state 21
    ID              shift and go to state 22

    term_high                      shift and go to state 45
    operand                        shift and go to state 19

state 30

    (27) term_high -> term_high MULTIPLY . operand
    (31) operand -> . NUMBER
    (32) operand -> . STRING
    (33) operand -> . ID

    NUMBER          shift and go to state 20
    STRING          shift and go to state 21
    ID              shift and go to state 22

    operand                        shift and go to state 46

state 31

    (28) term_high -> term_high DIVIDE . operand
    (31) operand -> . NUMBER
    (32) operand -> . STRING
    (33) operand -> . ID

    NUMBER          shift and go to state 20
    STRING          shift and go to state 21
    ID              shift and go to state 22

    operand                        shift and go to state 47

state 32

    (29) term_high -> term_high MOD . operand
    (31) operand -> . NUMBER
    (32) operand -> . STRING
    (33) operand -> . ID

    NUMBER          shift and go to state 20
    STRING          shift and go to state 21
    ID              shift and go to state 22

    operand                        shift and go to state 48

state 33

    (12) if_stmt -> IF condition THEN . NEWLINE statement_list else_part END

    NEWLINE         shift and go to state 49


state 34

    (16) condition -> term_low comp_op . term_low
    (24) term_low -> . term_low PLUS term_high
    (25) term_low -> . term_low MINUS term_high
    (26) term_low -> . term_high
    (27) term_high -> . term_high MULTIPLY operand
    (28) term_high -> . term_high DIVIDE operand
    (29) term_high -> . term_high MOD operand
    (30) term_high -> . operand
    (31) operand -> . NUMBER
    (32) operand -> . STRING
    (33) operand -> . ID

    NUMBER          shift and go to state 20
    STRING          shift and go to state 21
    ID              shift and go to state 22

    term_low                       shift and go to state 50
    term_high                      shift and go to state 18
    operand                        shift and go to state 19

state 35

    (17) comp_op -> EQ .

    NUMBER          reduce using rule 17 (comp_op -> EQ .)
    STRING          reduce using rule 17 (comp_op -> EQ .)
    ID              reduce using rule 17 (comp_op -> EQ .)


state 36

    (18) comp_op -> NE .

    NUMBER          reduce using rule 18 (comp_op -> NE .)
    STRING          reduce using rule 18 (comp_op -> NE .)
    ID              reduce using rule 18 (comp_op -> NE .)


state 37

    (19) comp_op -> GT .

    NUMBER          reduce using rule 19 (comp_op -> GT .)
    STRING          reduce using rule 19 (comp_op -> GT .)
    ID              reduce using rule 19 (comp_op -> GT .)


state 38

    (20) comp_op -> LT .

    NUMBER          reduce using rule 20 (comp_op -> LT .)
    STRING          reduce using rule 20 (comp_op -> LT .)
    ID              reduce using rule 20 (comp_op -> LT .)


state 39

    (21) comp_op -> GE .

    NUMBER          reduce using rule 21 (comp_op -> GE .)
    STRING          reduce using rule 21 (comp_op -> GE .)
    ID              reduce using rule 21 (comp_op -> GE .)


state 40

    (22) comp_op -> LE .

    NUMBER          reduce using rule 22 (comp_op -> LE .)
    STRING          reduce using rule 22 (comp_op -> LE .)
    ID              reduce using rule 22 (comp_op -> LE .)


state 41

    (23) comp_op -> TYPE_EQ .

    NUMBER          reduce using rule 23 (comp_op -> TYPE_EQ .)
    STRING          reduce using rule 23 (comp_op -> TYPE_EQ .)
    ID              reduce using rule 23 (comp_op -> TYPE_EQ .)


state 42

    (15) while_stmt -> WHILE condition DO . NEWLINE statement_list END

    NEWLINE         shift and go to state 51


state 43

    (9) assignment -> SET ID TO term_low .
    (24) term_low -> term_low . PLUS term_high
    (25) term_low -> term_low . MINUS term_high

    NEWLINE         reduce using rule 9 (assignment -> SET ID TO term_low .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29


state 44

    (24) term_low -> term_low PLUS term_high .
    (27) term_high -> term_high . MULTIPLY operand
    (28) term_high -> term_high . DIVIDE operand
    (29) term_high -> term_high . MOD operand

    PLUS            reduce using rule 24 (term_low -> term_low PLUS term_high .)
    MINUS           reduce using rule 24 (term_low -> term_low PLUS term_high .)
    NEWLINE         reduce using rule 24 (term_low -> term_low PLUS term_high .)
    EQ              reduce using rule 24 (term_low -> term_low PLUS term_high .)
    NE              reduce using rule 24 (term_low -> term_low PLUS term_high .)
    GT              reduce using rule 24 (term_low -> term_low PLUS term_high .)
    LT              reduce using rule 24 (term_low -> term_low PLUS term_high .)
    GE              reduce using rule 24 (term_low -> term_low PLUS term_high .)
    LE              reduce using rule 24 (term_low -> term_low PLUS term_high .)
    TYPE_EQ         reduce using rule 24 (term_low -> term_low PLUS term_high .)
    THEN            reduce using rule 24 (term_low -> term_low PLUS term_high .)
    DO              reduce using rule 24 (term_low -> term_low PLUS term_high .)
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    MOD             shift and go to state 32


state 45

    (25) term_low -> term_low MINUS term_high .
    (27) term_high -> term_high . MULTIPLY operand
    (28) term_high -> term_high . DIVIDE operand
    (29) term_high -> term_high . MOD operand

    PLUS            reduce using rule 25 (term_low -> term_low MINUS term_high .)
    MINUS           reduce using rule 25 (term_low -> term_low MINUS term_high .)
    NEWLINE         reduce using rule 25 (term_low -> term_low MINUS term_high .)
    EQ              reduce using rule 25 (term_low -> term_low MINUS term_high .)
    NE              reduce using rule 25 (term_low -> term_low MINUS term_high .)
    GT              reduce using rule 25 (term_low -> term_low MINUS term_high .)
    LT              reduce using rule 25 (term_low -> term_low MINUS term_high .)
    GE              reduce using rule 25 (term_low -> term_low MINUS term_high .)
    LE              reduce using rule 25 (term_low -> term_low MINUS term_high .)
    TYPE_EQ         reduce using rule 25 (term_low -> term_low MINUS term_high .)
    THEN            reduce using rule 25 (term_low -> term_low MINUS term_high .)
    DO              reduce using rule 25 (term_low -> term_low MINUS term_high .)
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    MOD             shift and go to state 32


state 46

    (27) term_high -> term_high MULTIPLY operand .

    MULTIPLY        reduce using rule 27 (term_high -> term_high MULTIPLY operand .)
    DIVIDE          reduce using rule 27 (term_high -> term_high MULTIPLY operand .)
    MOD             reduce using rule 27 (term_high -> term_high MULTIPLY operand .)
    PLUS            reduce using rule 27 (term_high -> term_high MULTIPLY operand .)
    MINUS           reduce using rule 27 (term_high -> term_high MULTIPLY operand .)
    NEWLINE         reduce using rule 27 (term_high -> term_high MULTIPLY operand .)
    EQ              reduce using rule 27 (term_high -> term_high MULTIPLY operand .)
    NE              reduce using rule 27 (term_high -> term_high MULTIPLY operand .)
    GT              reduce using rule 27 (term_high -> term_high MULTIPLY operand .)
    LT              reduce using rule 27 (term_high -> term_high MULTIPLY operand .)
    GE              reduce using rule 27 (term_high -> term_high MULTIPLY operand .)
    LE              reduce using rule 27 (term_high -> term_high MULTIPLY operand .)
    TYPE_EQ         reduce using rule 27 (term_high -> term_high MULTIPLY operand .)
    THEN            reduce using rule 27 (term_high -> term_high MULTIPLY operand .)
    DO              reduce using rule 27 (term_high -> term_high MULTIPLY operand .)


state 47

    (28) term_high -> term_high DIVIDE operand .

    MULTIPLY        reduce using rule 28 (term_high -> term_high DIVIDE operand .)
    DIVIDE          reduce using rule 28 (term_high -> term_high DIVIDE operand .)
    MOD             reduce using rule 28 (term_high -> term_high DIVIDE operand .)
    PLUS            reduce using rule 28 (term_high -> term_high DIVIDE operand .)
    MINUS           reduce using rule 28 (term_high -> term_high DIVIDE operand .)
    NEWLINE         reduce using rule 28 (term_high -> term_high DIVIDE operand .)
    EQ              reduce using rule 28 (term_high -> term_high DIVIDE operand .)
    NE              reduce using rule 28 (term_high -> term_high DIVIDE operand .)
    GT              reduce using rule 28 (term_high -> term_high DIVIDE operand .)
    LT              reduce using rule 28 (term_high -> term_high DIVIDE operand .)
    GE              reduce using rule 28 (term_high -> term_high DIVIDE operand .)
    LE              reduce using rule 28 (term_high -> term_high DIVIDE operand .)
    TYPE_EQ         reduce using rule 28 (term_high -> term_high DIVIDE operand .)
    THEN            reduce using rule 28 (term_high -> term_high DIVIDE operand .)
    DO              reduce using rule 28 (term_high -> term_high DIVIDE operand .)


state 48

    (29) term_high -> term_high MOD operand .

    MULTIPLY        reduce using rule 29 (term_high -> term_high MOD operand .)
    DIVIDE          reduce using rule 29 (term_high -> term_high MOD operand .)
    MOD             reduce using rule 29 (term_high -> term_high MOD operand .)
    PLUS            reduce using rule 29 (term_high -> term_high MOD operand .)
    MINUS           reduce using rule 29 (term_high -> term_high MOD operand .)
    NEWLINE         reduce using rule 29 (term_high -> term_high MOD operand .)
    EQ              reduce using rule 29 (term_high -> term_high MOD operand .)
    NE              reduce using rule 29 (term_high -> term_high MOD operand .)
    GT              reduce using rule 29 (term_high -> term_high MOD operand .)
    LT              reduce using rule 29 (term_high -> term_high MOD operand .)
    GE              reduce using rule 29 (term_high -> term_high MOD operand .)
    LE              reduce using rule 29 (term_high -> term_high MOD operand .)
    TYPE_EQ         reduce using rule 29 (term_high -> term_high MOD operand .)
    THEN            reduce using rule 29 (term_high -> term_high MOD operand .)
    DO              reduce using rule 29 (term_high -> term_high MOD operand .)


state 49

    (12) if_stmt -> IF condition THEN NEWLINE . statement_list else_part END
    (2) statement_list -> . statement NEWLINE statement_list
    (3) statement_list -> . statement NEWLINE
    (4) statement -> . assignment
    (5) statement -> . input_stmt
    (6) statement -> . output_stmt
    (7) statement -> . if_stmt
    (8) statement -> . while_stmt
    (9) assignment -> . SET ID TO term_low
    (10) input_stmt -> . INPUT ID
    (11) output_stmt -> . PRINT term_low
    (12) if_stmt -> . IF condition THEN NEWLINE statement_list else_part END
    (15) while_stmt -> . WHILE condition DO NEWLINE statement_list END

    SET             shift and go to state 9
    INPUT           shift and go to state 10
    PRINT           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13

    statement_list                 shift and go to state 52
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input_stmt                     shift and go to state 5
    output_stmt                    shift and go to state 6
    if_stmt                        shift and go to state 7
    while_stmt                     shift and go to state 8

state 50

    (16) condition -> term_low comp_op term_low .
    (24) term_low -> term_low . PLUS term_high
    (25) term_low -> term_low . MINUS term_high

    THEN            reduce using rule 16 (condition -> term_low comp_op term_low .)
    DO              reduce using rule 16 (condition -> term_low comp_op term_low .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29


state 51

    (15) while_stmt -> WHILE condition DO NEWLINE . statement_list END
    (2) statement_list -> . statement NEWLINE statement_list
    (3) statement_list -> . statement NEWLINE
    (4) statement -> . assignment
    (5) statement -> . input_stmt
    (6) statement -> . output_stmt
    (7) statement -> . if_stmt
    (8) statement -> . while_stmt
    (9) assignment -> . SET ID TO term_low
    (10) input_stmt -> . INPUT ID
    (11) output_stmt -> . PRINT term_low
    (12) if_stmt -> . IF condition THEN NEWLINE statement_list else_part END
    (15) while_stmt -> . WHILE condition DO NEWLINE statement_list END

    SET             shift and go to state 9
    INPUT           shift and go to state 10
    PRINT           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13

    statement_list                 shift and go to state 53
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input_stmt                     shift and go to state 5
    output_stmt                    shift and go to state 6
    if_stmt                        shift and go to state 7
    while_stmt                     shift and go to state 8

state 52

    (12) if_stmt -> IF condition THEN NEWLINE statement_list . else_part END
    (13) else_part -> . ELSE NEWLINE statement_list
    (14) else_part -> .

    ELSE            shift and go to state 55
    END             reduce using rule 14 (else_part -> .)

    else_part                      shift and go to state 54

state 53

    (15) while_stmt -> WHILE condition DO NEWLINE statement_list . END

    END             shift and go to state 56


state 54

    (12) if_stmt -> IF condition THEN NEWLINE statement_list else_part . END

    END             shift and go to state 57


state 55

    (13) else_part -> ELSE . NEWLINE statement_list

    NEWLINE         shift and go to state 58


state 56

    (15) while_stmt -> WHILE condition DO NEWLINE statement_list END .

    NEWLINE         reduce using rule 15 (while_stmt -> WHILE condition DO NEWLINE statement_list END .)


state 57

    (12) if_stmt -> IF condition THEN NEWLINE statement_list else_part END .

    NEWLINE         reduce using rule 12 (if_stmt -> IF condition THEN NEWLINE statement_list else_part END .)


state 58

    (13) else_part -> ELSE NEWLINE . statement_list
    (2) statement_list -> . statement NEWLINE statement_list
    (3) statement_list -> . statement NEWLINE
    (4) statement -> . assignment
    (5) statement -> . input_stmt
    (6) statement -> . output_stmt
    (7) statement -> . if_stmt
    (8) statement -> . while_stmt
    (9) assignment -> . SET ID TO term_low
    (10) input_stmt -> . INPUT ID
    (11) output_stmt -> . PRINT term_low
    (12) if_stmt -> . IF condition THEN NEWLINE statement_list else_part END
    (15) while_stmt -> . WHILE condition DO NEWLINE statement_list END

    SET             shift and go to state 9
    INPUT           shift and go to state 10
    PRINT           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13

    statement_list                 shift and go to state 59
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    input_stmt                     shift and go to state 5
    output_stmt                    shift and go to state 6
    if_stmt                        shift and go to state 7
    while_stmt                     shift and go to state 8

state 59

    (13) else_part -> ELSE NEWLINE statement_list .

    END             reduce using rule 13 (else_part -> ELSE NEWLINE statement_list .)

