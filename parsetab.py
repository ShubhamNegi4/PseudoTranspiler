
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftEQNEGTLTGELEleftPLUSMINUSleftMULTIPLYDIVIDEMODDIVIDE DO ELSE END EQ GE GT ID IF INPUT LE LT MINUS MOD MULTIPLY NE NEWLINE NUMBER PLUS PRINT SET STRING THEN TO TYPE_EQ WHILEprogram : statement_liststatement_list : statement NEWLINE statement_list\n| statement NEWLINEstatement : assignment\n| input_stmt\n| output_stmt\n| if_stmt\n| while_stmtassignment : SET ID TO term_lowinput_stmt : INPUT IDoutput_stmt : PRINT term_low\n        if_stmt : IF condition THEN NEWLINE statement_list else_part END\n       else_part : ELSE NEWLINE statement_list\n| \nwhile_stmt : WHILE condition DO NEWLINE statement_list END\n        condition : term_low comp_op term_low\n        comp_op : EQ\n| NE \n| GT \n| LT \n| GE \n| LE\n| TYPE_EQ\nterm_low : term_low PLUS term_high\n| term_low MINUS term_high\n| term_high\nterm_high : term_high MULTIPLY operand\n| term_high DIVIDE operand\n| term_high MOD operand\n| operand\noperand : NUMBER\n| STRING\n| ID\n'
    
_lr_action_items = {'SET':([0,14,49,51,58,],[9,9,9,9,9,]),'INPUT':([0,14,49,51,58,],[10,10,10,10,10,]),'PRINT':([0,14,49,51,58,],[11,11,11,11,11,]),'IF':([0,14,49,51,58,],[12,12,12,12,12,]),'WHILE':([0,14,49,51,58,],[13,13,13,13,13,]),'$end':([1,2,14,26,],[0,-1,-3,-2,]),'NEWLINE':([3,4,5,6,7,8,16,17,18,19,20,21,22,33,42,43,44,45,46,47,48,55,56,57,],[14,-4,-5,-6,-7,-8,-10,-11,-26,-30,-31,-32,-33,49,51,-9,-24,-25,-27,-28,-29,58,-15,-12,]),'ID':([9,10,11,12,13,27,28,29,30,31,32,34,35,36,37,38,39,40,41,],[15,16,22,22,22,22,22,22,22,22,22,22,-17,-18,-19,-20,-21,-22,-23,]),'NUMBER':([11,12,13,27,28,29,30,31,32,34,35,36,37,38,39,40,41,],[20,20,20,20,20,20,20,20,20,20,-17,-18,-19,-20,-21,-22,-23,]),'STRING':([11,12,13,27,28,29,30,31,32,34,35,36,37,38,39,40,41,],[21,21,21,21,21,21,21,21,21,21,-17,-18,-19,-20,-21,-22,-23,]),'ELSE':([14,26,52,],[-3,-2,55,]),'END':([14,26,52,53,54,59,],[-3,-2,-14,56,57,-13,]),'TO':([15,],[27,]),'PLUS':([17,18,19,20,21,22,24,43,44,45,46,47,48,50,],[28,-26,-30,-31,-32,-33,28,28,-24,-25,-27,-28,-29,28,]),'MINUS':([17,18,19,20,21,22,24,43,44,45,46,47,48,50,],[29,-26,-30,-31,-32,-33,29,29,-24,-25,-27,-28,-29,29,]),'EQ':([18,19,20,21,22,24,44,45,46,47,48,],[-26,-30,-31,-32,-33,35,-24,-25,-27,-28,-29,]),'NE':([18,19,20,21,22,24,44,45,46,47,48,],[-26,-30,-31,-32,-33,36,-24,-25,-27,-28,-29,]),'GT':([18,19,20,21,22,24,44,45,46,47,48,],[-26,-30,-31,-32,-33,37,-24,-25,-27,-28,-29,]),'LT':([18,19,20,21,22,24,44,45,46,47,48,],[-26,-30,-31,-32,-33,38,-24,-25,-27,-28,-29,]),'GE':([18,19,20,21,22,24,44,45,46,47,48,],[-26,-30,-31,-32,-33,39,-24,-25,-27,-28,-29,]),'LE':([18,19,20,21,22,24,44,45,46,47,48,],[-26,-30,-31,-32,-33,40,-24,-25,-27,-28,-29,]),'TYPE_EQ':([18,19,20,21,22,24,44,45,46,47,48,],[-26,-30,-31,-32,-33,41,-24,-25,-27,-28,-29,]),'THEN':([18,19,20,21,22,23,44,45,46,47,48,50,],[-26,-30,-31,-32,-33,33,-24,-25,-27,-28,-29,-16,]),'DO':([18,19,20,21,22,25,44,45,46,47,48,50,],[-26,-30,-31,-32,-33,42,-24,-25,-27,-28,-29,-16,]),'MULTIPLY':([18,19,20,21,22,44,45,46,47,48,],[30,-30,-31,-32,-33,30,30,-27,-28,-29,]),'DIVIDE':([18,19,20,21,22,44,45,46,47,48,],[31,-30,-31,-32,-33,31,31,-27,-28,-29,]),'MOD':([18,19,20,21,22,44,45,46,47,48,],[32,-30,-31,-32,-33,32,32,-27,-28,-29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,14,49,51,58,],[2,26,52,53,59,]),'statement':([0,14,49,51,58,],[3,3,3,3,3,]),'assignment':([0,14,49,51,58,],[4,4,4,4,4,]),'input_stmt':([0,14,49,51,58,],[5,5,5,5,5,]),'output_stmt':([0,14,49,51,58,],[6,6,6,6,6,]),'if_stmt':([0,14,49,51,58,],[7,7,7,7,7,]),'while_stmt':([0,14,49,51,58,],[8,8,8,8,8,]),'term_low':([11,12,13,27,34,],[17,24,24,43,50,]),'term_high':([11,12,13,27,28,29,34,],[18,18,18,18,44,45,18,]),'operand':([11,12,13,27,28,29,30,31,32,34,],[19,19,19,19,19,19,46,47,48,19,]),'condition':([12,13,],[23,25,]),'comp_op':([24,],[34,]),'else_part':([52,],[54,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',72),
  ('statement_list -> statement NEWLINE statement_list','statement_list',3,'p_statement_list','parser.py',78),
  ('statement_list -> statement NEWLINE','statement_list',2,'p_statement_list','parser.py',79),
  ('statement -> assignment','statement',1,'p_statement','parser.py',89),
  ('statement -> input_stmt','statement',1,'p_statement','parser.py',90),
  ('statement -> output_stmt','statement',1,'p_statement','parser.py',91),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',92),
  ('statement -> while_stmt','statement',1,'p_statement','parser.py',93),
  ('assignment -> SET ID TO term_low','assignment',4,'p_assignment','parser.py',99),
  ('input_stmt -> INPUT ID','input_stmt',2,'p_input_stmt','parser.py',107),
  ('output_stmt -> PRINT term_low','output_stmt',2,'p_output_stmt','parser.py',115),
  ('if_stmt -> IF condition THEN NEWLINE statement_list else_part END','if_stmt',7,'p_if_stmt','parser.py',124),
  ('else_part -> ELSE NEWLINE statement_list','else_part',3,'p_else_part','parser.py',133),
  ('else_part -> <empty>','else_part',0,'p_else_part','parser.py',134),
  ('while_stmt -> WHILE condition DO NEWLINE statement_list END','while_stmt',6,'p_while_stmt','parser.py',142),
  ('condition -> term_low comp_op term_low','condition',3,'p_condition','parser.py',150),
  ('comp_op -> EQ','comp_op',1,'p_comp_op','parser.py',160),
  ('comp_op -> NE','comp_op',1,'p_comp_op','parser.py',161),
  ('comp_op -> GT','comp_op',1,'p_comp_op','parser.py',162),
  ('comp_op -> LT','comp_op',1,'p_comp_op','parser.py',163),
  ('comp_op -> GE','comp_op',1,'p_comp_op','parser.py',164),
  ('comp_op -> LE','comp_op',1,'p_comp_op','parser.py',165),
  ('comp_op -> TYPE_EQ','comp_op',1,'p_comp_op','parser.py',166),
  ('term_low -> term_low PLUS term_high','term_low',3,'p_term_low','parser.py',173),
  ('term_low -> term_low MINUS term_high','term_low',3,'p_term_low','parser.py',174),
  ('term_low -> term_high','term_low',1,'p_term_low','parser.py',175),
  ('term_high -> term_high MULTIPLY operand','term_high',3,'p_term_high','parser.py',186),
  ('term_high -> term_high DIVIDE operand','term_high',3,'p_term_high','parser.py',187),
  ('term_high -> term_high MOD operand','term_high',3,'p_term_high','parser.py',188),
  ('term_high -> operand','term_high',1,'p_term_high','parser.py',189),
  ('operand -> NUMBER','operand',1,'p_operand','parser.py',200),
  ('operand -> STRING','operand',1,'p_operand','parser.py',201),
  ('operand -> ID','operand',1,'p_operand','parser.py',202),
]
